diff --git a/mail/components/compose/content/MsgComposeCommands.js b/mail/components/compose/content/MsgComposeCommands.js
--- a/mail/components/compose/content/MsgComposeCommands.js
+++ b/mail/components/compose/content/MsgComposeCommands.js
@@ -50,6 +50,15 @@ var { MailConstants } = ChromeUtils.impo
 var { ExtensionParent } = ChromeUtils.import(
   "resource://gre/modules/ExtensionParent.jsm"
 );
+var KeyLookupHelper = ChromeUtils.import(
+  "chrome://openpgp/content/modules/keyLookupHelper.jsm"
+).KeyLookupHelper;
+var EnigmailWindows = ChromeUtils.import(
+  "chrome://openpgp/content/modules/windows.jsm"
+);
+var { EnigmailDialog } = ChromeUtils.import(
+  "chrome://openpgp/content/modules/dialog.jsm"
+);

 XPCOMUtils.defineLazyGetter(
   this,
@@ -139,6 +148,7 @@ var gComposeType;
 var gLanguageObserver;
 var gRecipientObserver;
 var gBccObserver;
+var gRecipientKeysObserver;
 var gCheckPublicRecipientsTimer;
 var gBodyFromArgs;

@@ -151,6 +161,7 @@ var gBodyFromArgs;
 var gSMFields = null;

 var gSelectedTechnologyIsPGP = false;
+var gDualEncryptionTechnology = false;

 // The initial flags store the value we used at composer open time.
 // Some flags might be automatically changed as a consequence of other
@@ -183,6 +194,8 @@ var gEncryptedURIService = Cc[
   "@mozilla.org/messenger-smime/smime-encrypted-uris-service;1"
 ].getService(Ci.nsIEncryptedSMIMEURIsService);

+var gShowAllKeyNotifications = false;
+
 try {
   var gDragService = Cc["@mozilla.org/widget/dragservice;1"].getService(
     Ci.nsIDragService
@@ -1657,6 +1670,24 @@ function isPgpConfigured() {
   return !!gCurrentIdentity.getUnicharAttribute("openpgp_key_id");
 }

+function hasBothEncryptionTechnologies() {
+  let enabledOpenPGP = false;
+  let enabledSMIME = false;
+  let identityList = document.getElementById("msgIdentity");
+  for (let menuItem of identityList.menupopup.children) {
+    identity = MailServices.accounts.getIdentity(menuItem.getAttribute("identitykey"));
+    if (identity) {
+      if (!!identity.getUnicharAttribute("encryption_cert_name")) {
+        enabledSMIME = true;
+      }
+      if (!!identity.getUnicharAttribute("openpgp_key_id")) {
+        enabledOpenPGP = true;
+      }
+    }
+  }
+  gDualEncryptionTechnology = (enabledSMIME && enabledOpenPGP);
+}
+
 function toggleGlobalSignMessage() {
   gSendSigned = !gSendSigned;
   gUserTouchedSendSigned = true;
@@ -1668,8 +1699,6 @@ function toggleGlobalSignMessage() {
       gAttachMyPublicPGPKey = gAttachMyPublicPGPKeyInitial;
     }
   }
-
-  setEncSigStatusUI();
 }

 function setGlobalEncryptMessage(mode) {
@@ -1720,8 +1749,6 @@ function setGlobalEncryptMessage(mode) {
   if (!gUserTouchedEncryptSubject) {
     gEncryptSubject = gCurrentIdentity.getBoolAttribute("protectSubject");
   }
-
-  setEncSigStatusUI();
 }

 function toggleAttachMyPublicKey() {
@@ -1729,9 +1756,10 @@ function toggleAttachMyPublicKey() {
   gUserTouchedAttachMyPubKey = true;
 }

-function toggleEncryptSubject() {
+function toggleEncryptedSubject() {
   gEncryptSubject = !gEncryptSubject;
   gUserTouchedEncryptSubject = true;
+  updateEncryptedSubject();
 }

 function setSecuritySettings(menu_id) {
@@ -1792,40 +1820,27 @@ function setSecuritySettings(menu_id) {
     smimeItem.disabled =
       !isSmimeSigningConfigured() && !isSmimeEncryptionConfigured();

-    let sep = document.getElementById("sepOpenPGP" + menu_id);
-    let men = document.getElementById("menu_OpenPGPOptions" + menu_id);
-    let box = document.getElementById("menu_securityMyPublicKey" + menu_id);
-    let box2 = document.getElementById("menu_securityEncryptSubject" + menu_id);
-
-    if (!BondOpenPGP.isEnabled()) {
+    let attachKeyItem = document.getElementById("menu_securityMyPublicKey" + menu_id);
+    let encryptSubjectItem = document.getElementById("menu_securityEncryptSubject" + menu_id);
+
+    if (gSelectedTechnologyIsPGP) {
+      pgpItem.setAttribute("checked", true);
+      smimeItem.setAttribute("checked", false);
+      if (!BondOpenPGP.isEnabled()) {
+        attachKeyItem.setAttribute("checked", false);
+        encryptSubjectItem.setAttribute("checked", false);
+      } else {
+        attachKeyItem.setAttribute("checked", gAttachMyPublicPGPKey);
+        encryptSubjectItem.setAttribute("checked", gEncryptSubject);
+        if (!gSendEncrypted || disableEnc) {
+          encryptSubjectItem.setAttribute("checked", false);
+        }
+      }
+    } else {
       pgpItem.setAttribute("checked", false);
       smimeItem.setAttribute("checked", true);
-      pgpItem.disabled = true;
-      sep.setAttribute("hidden", true);
-      men.setAttribute("hidden", true);
-      box.setAttribute("hidden", true);
-      box.setAttribute("checked", false);
-      box.disabled = true;
-      box2.setAttribute("hidden", true);
-      box2.setAttribute("checked", false);
-      box2.disabled = true;
-    } else {
-      pgpItem.setAttribute("checked", gSelectedTechnologyIsPGP);
-      smimeItem.setAttribute("checked", !gSelectedTechnologyIsPGP);
-
-      pgpItem.disabled = !isPgpConfigured();
-
-      sep.setAttribute("hidden", !gSelectedTechnologyIsPGP);
-      men.setAttribute("hidden", !gSelectedTechnologyIsPGP);
-      box.setAttribute("hidden", !gSelectedTechnologyIsPGP);
-      box.setAttribute("checked", gAttachMyPublicPGPKey);
-      box2.setAttribute("hidden", !gSelectedTechnologyIsPGP);
-      box2.setAttribute("checked", gEncryptSubject);
-
-      if (gSelectedTechnologyIsPGP) {
-        box.disabled = disableEnc;
-        box2.disabled = disableEnc;
-      }
+      attachKeyItem.setAttribute("checked", false);
+      encryptSubjectItem.setAttribute("checked", false);
     }
   }
 }
@@ -2994,6 +3009,377 @@ function manageAttachmentNotification(aF
   );
 }

+async function checkRecipientKeys() {
+  /**
+   * Get list of all recipients
+   */
+  let recipientPills = [
+    ...document.querySelectorAll("#toAddrContainer > mail-address-pill, #ccAddrContainer > mail-address-pill, #bccAddrContainer > mail-address-pill"),
+  ];
+  let recipients = [...new Set(recipientPills.map(pill => pill.emailAddress.toLowerCase()))];
+
+  /**
+   * Remove useless key notifications
+   */
+  for (let notification of gComposeNotification.allNotifications) {
+    let value = notification.getAttribute("value");
+    if (value.startsWith("keyNotification")) {
+      if (!gSendEncrypted) {
+        // Remove all key notifications if encryption is turned off
+        gComposeNotification.removeNotification(notification);
+      } else {
+        // Remove key notifications that don't match a recipient
+        let addr = value.replace(/^keyNotification/, '');
+        if (!recipients.includes(addr)) {
+          gComposeNotification.removeNotification(notification);
+        }
+        // Remove key notifications for recipients that have a valid key now
+        let foundKeys = await EnigmailKeyRing.getMultValidKeysForOneRecipient(addr);
+        if (foundKeys && foundKeys.length) {
+          gComposeNotification.removeNotification(notification);
+        }
+      }
+    }
+  }
+
+  /**
+   * Remove from "Never Encrypt" if the recipient has a valid key
+   */
+  let neverEncrypt = new Set(Services.prefs.getStringPref("mail.openpgp.never_encrypt").split(" "));
+  for (let addr of recipients) {
+    let foundKeys = await EnigmailKeyRing.getKeysByEmail(addr, false, true);
+    if (foundKeys && foundKeys.length) {
+      for (let key of foundKeys) {
+        let level = await EnigmailKeyRing.isValidKeyForRecipient(key, addr);
+        key.acceptance = EnigmailKeyRing.getAcceptanceStringFromAcceptanceLevel(level);
+        if (key.acceptance == "unverified" || key.acceptance == "verified") {
+          neverEncrypt.delete(addr);
+          Services.prefs.setStringPref("mail.openpgp.never_encrypt", [...neverEncrypt].join(" "));
+        }
+      }
+    }
+  }
+
+  /**
+   * Turn encryption off if all the recipients are "Never Encrypt".
+   */
+  if (gSendEncrypted && !gUserTouchedSendEncrypted && recipients.length) {
+    let allNeverEncrypt = true;
+    for (let addr of recipients) {
+      if (!neverEncrypt.has(addr)) {
+        allNeverEncrypt = false;
+      }
+    }
+    if (allNeverEncrypt) {
+      setGlobalEncryptMessage(0);
+    }
+  }
+
+  /**
+   * Calculate key notifications
+   *
+   * 1 notification at most per email address that has no valid key.
+   * If an email address has several invalid keys, we notify only about the 1st
+   * undecided key, or the 1st expired key, or the 1st rejected key, in this
+   * order.
+   */
+  let keyNotifications = [];
+  if (gSendEncrypted) {
+    for (let addr of recipients) {
+      foundKeys = await EnigmailKeyRing.getKeysByEmail(addr, false, true);
+      if (!foundKeys || !foundKeys.length) {
+        // Notify "unavailable" if no key is available
+        keyNotifications.push([addr, null, "unavailable"]);
+      } else {
+        // Skip if we have at least 1 valid key
+        let valid = false;
+        for (let key of foundKeys) {
+          let level = await EnigmailKeyRing.isValidKeyForRecipient(key, addr);
+          key.acceptance = EnigmailKeyRing.getAcceptanceStringFromAcceptanceLevel(level);
+          if (key.acceptance == "unverified" || key.acceptance == "verified") {
+            console.log(addr + ": valid key " + key.fpr);
+            valid = true;
+            break;
+          }
+        }
+        if (valid) {
+          continue;
+        } else {
+          // Notify "undecided" if at least 1 key is undecided (and not expired)
+          let undecided = false;
+          for (let key of foundKeys) {
+            if (key.acceptance == "undecided" && !EnigmailKeyRing.isExpired(key)) {
+              keyNotifications.push([addr, key, "undecided"]);
+              console.log(addr + ": undecided key " + key.fpr);
+              undecided = true;
+              break;
+            }
+          }
+          if (undecided) {
+            continue;
+          } else {
+            // Notify "expired" if at least 1 key is expired
+            let expired = false;
+            for (let key of foundKeys) {
+              if (EnigmailKeyRing.isExpired(key)) {
+                keyNotifications.push([addr, key, "expired"]);
+                console.log(addr + ": expired key " + key.fpr + " (" + key.expiryTime + ")");
+                expired = true;
+                break;
+              }
+            }
+            if (expired) {
+              continue;
+            } else {
+              // Notify "rejected" if at least 1 key is rejected
+              let rejected = false;
+              for (let key of foundKeys) {
+                if (key.acceptance == "rejected") {
+                  keyNotifications.push([addr, key, "rejected"]);
+                  console.log(addr + ": rejected key " + key.fpr);
+                  rejected = true;
+                  break;
+                }
+              }
+            }
+          }
+        }
+      }
+    }
+  }
+
+  /**
+   * Remove all previous key notifications
+   */
+  for (let notification of gComposeNotification.allNotifications) {
+    let value = notification.getAttribute("value");
+    if (value.startsWith("keyNotification")) {
+      gComposeNotification.removeNotification(notification);
+    }
+  }
+
+  /**
+   * Update recipient pills
+   */
+  for (let pill of recipientPills) {
+    pill.classList.remove("missing-key");
+    pill.classList.remove("invalid-key");
+    for (let notification of keyNotifications) {
+      let addr, key, type;
+      [addr, key, type] = notification;
+      if (pill.emailAddress.toLowerCase() === addr) {
+        let pillClass;
+        let tooltipText;
+        switch (type) {
+          case "unavailable":
+            pillClass = "missing-key";
+            tooltipText = await document.l10n.formatValue("pill-tooltip-key-undecided", { addr: addr });
+            break;
+
+          case "undecided":
+            pillClass = "invalid-key";
+            tooltipText = await document.l10n.formatValue("pill-tooltip-key-undecided", { addr: addr });
+            break;
+
+          case "expired":
+            pillClass = "invalid-key";
+            tooltipText = await document.l10n.formatValue("pill-tooltip-key-expired", { addr: addr });
+            break;
+
+          case "rejected":
+            pillClass = "invalid-key";
+            tooltipText = await document.l10n.formatValue("pill-tooltip-key-rejected", { addr: addr });
+            break;
+        }
+        if (!pill.classList.contains("invalid-address")) {
+          pill.classList.add(pillClass);
+        }
+        pill.setAttribute("tooltiptext", tooltipText);
+      }
+    }
+  }
+
+  /**
+   * Display new key notifications
+   *
+   * Unless gShowAllKeyNotifications has been set by the user previously:
+   * - Maximum 3 key notifications
+   * - The 3rd key notification is a summary if we need 4 notifications or more
+   */
+  let i = 0;
+  for (let notification of keyNotifications) {
+    i = i + 1;
+    let addr, key, type;
+    [addr, key, type] = notification;
+    if (i < 3 || gShowAllKeyNotifications) {
+      await displayKeyNotification(addr, key, type);
+    } else {
+      if (keyNotifications.length == 3) {
+        await displayKeyNotification(addr, key, type);
+      } else {
+        await displayKeyNotificationSummary(keyNotifications.length - 2);
+        break;
+      }
+    }
+  }
+
+  /**
+   * Reset "Show All" if 3 key notifications or less
+   */
+  if (keyNotifications.length <= 3) {
+    gShowAllKeyNotifications = false;
+  }
+
+  /**
+   * Disable Send button if any key notification
+   */
+  var sendButton = document.getElementById("button-send");
+  // XXX: Update Send Now entry in File menu.
+  if (keyNotifications.length > 0) {
+    let cannotEncryptTooltip = await document.l10n.formatValue("send-button-cannot-encrypt-tooltip");
+    sendButton.disabled = true;
+    sendButton.setAttribute(
+      "tooltiptext",
+      cannotEncryptTooltip
+    );
+  } else {
+    sendButton.disabled = false;
+    sendButton.setAttribute(
+      "tooltiptext",
+      sendButton.getAttribute("now_tooltiptext")
+    );
+  }
+}
+
+async function displayKeyNotificationSummary(n) {
+  let notificationLabel = document.createXULElement("label");
+  document.l10n.setAttributes(
+    notificationLabel,
+    "key-notification-summary",
+    { n: n }
+  );
+  let showAllButton = {
+    "l10n-id": "key-notification-show-all",
+    callback() {
+      gShowAllKeyNotifications = true;
+      checkRecipientKeys();
+    },
+  };
+  notification = gComposeNotification.appendNotification(
+    "",
+    "keyNotificationSummary",
+    null,
+    gComposeNotification.PRIORITY_WARNING_MEDIUM,
+    [showAllButton]
+  );
+  notification.messageText.appendChild(notificationLabel);
+  notification.closeButton.hidden = true;
+}
+
+async function displayKeyNotification(addr, key, type) {
+  // https://wiki.mozilla.org/XUL:NotificationBox
+  let notificationLabel = document.createXULElement("label");
+  let neverEncryptMessage = await document.l10n.formatValue("never-encrypt-message", { addr: addr });
+  let neverEncryptCancel = await document.l10n.formatValue("never-encrypt-cancel");
+  let neverEncryptOk = await document.l10n.formatValue("never-encrypt-ok");
+  let doNotEncryptButton = {
+    "l10n-id": "key-notification-encryption-off",
+    callback() {
+      setSendEncrypted(false);
+      let neverEncrypt = new Set(Services.prefs.getStringPref("mail.openpgp.never_encrypt").split(" "));
+      if (!neverEncrypt.has(addr)) {
+        let eachTime = EnigmailDialog.confirmDlg(window, neverEncryptMessage, neverEncryptOk, neverEncryptCancel);
+        if (!eachTime) {
+          console.log("never encrypt to " + addr);
+          console.log("mail.openpgp.never_encrypt: " + Services.prefs.getStringPref("mail.openpgp.never_encrypt"));
+          neverEncrypt = new Set(Services.prefs.getStringPref("mail.openpgp.never_encrypt").split(" "));
+          neverEncrypt.add(addr);
+          Services.prefs.setStringPref("mail.openpgp.never_encrypt", [...neverEncrypt].join(" "));
+          console.log("mail.openpgp.never_encrypt: " + Services.prefs.getStringPref("mail.openpgp.never_encrypt"));
+        }
+      }
+      return true; // Keep the notification open
+    },
+  };
+
+  let priority;
+  let solutionButton;
+  switch (type) {
+    case "unavailable":
+      document.l10n.setAttributes(
+        notificationLabel,
+        "key-notification-unavailable",
+        { addr: addr }
+      );
+      solutionButton = {
+        "l10n-id": "key-notification-search-key",
+        callback() {
+          KeyLookupHelper.lookupAndImportByEmail(window, addr, true, checkRecipientKeys);
+          return true;
+        },
+      };
+      break;
+
+    case "undecided":
+      document.l10n.setAttributes(
+        notificationLabel,
+        "key-notification-undecided",
+        { addr: addr }
+      );
+      solutionButton = {
+        "l10n-id": "key-notification-manage-key",
+        callback() {
+          EnigmailWindows.openKeyDetails(window, key.fpr, false);
+          // XXX: Refresh the list of notifications when coming back from the key details dialog.
+          return true;
+        },
+      };
+      break;
+
+    case "expired":
+      document.l10n.setAttributes(
+        notificationLabel,
+        "key-notification-expired",
+        { addr: addr }
+      );
+      solutionButton = {
+        "l10n-id": "key-notification-search-key",
+        callback() {
+          KeyLookupHelper.lookupAndImportByEmail(window, addr, true, checkRecipientKeys);
+          return true;
+        },
+      };
+      break;
+
+    case "rejected":
+      document.l10n.setAttributes(
+        notificationLabel,
+        "key-notification-rejected",
+        { addr: addr }
+      );
+      solutionButton = {
+        "l10n-id": "key-notification-manage-key",
+        callback() {
+          EnigmailWindows.openKeyDetails(window, key.fpr, false);
+          // XXX: Refresh the list of notifications when coming back from the key details dialog.
+          return true;
+        },
+      };
+      break;
+  }
+
+  notification = gComposeNotification.appendNotification(
+    "",
+    "keyNotification" + addr,
+    null,
+    gComposeNotification.PRIORITY_WARNING_MEDIUM,
+    [doNotEncryptButton, solutionButton]
+  );
+  notification.classList.add("key-notification");
+  notification.messageText.appendChild(notificationLabel);
+  notification.closeButton.hidden = true;
+}
+
 /**
  * Returns whether the attachment notification should be suppressed regardless
  * of the state of keywords.
@@ -3832,6 +4218,18 @@ function ComposeStartup(aParams) {
     childList: true,
   });
   window.addEventListener("sendencryptedchange", checkEncryptedBccRecipients);
+
+  gRecipientKeysObserver = new MutationObserver(checkRecipientKeys);
+  gRecipientKeysObserver.observe(document.getElementById("toAddrContainer"), {
+    childList: true,
+  });
+  gRecipientKeysObserver.observe(document.getElementById("ccAddrContainer"), {
+    childList: true,
+  });
+  gRecipientKeysObserver.observe(document.getElementById("bccAddrContainer"), {
+    childList: true,
+  });
+  window.addEventListener("sendencryptedchange", checkRecipientKeys);
 }
 /* eslint-enable complexity */

@@ -3928,6 +4326,10 @@ function adjustSignEncryptAfterIdentityC
     }
   }

+  // Show OpenPGP/SMIME toggle if there are at least 1 account with OpenPGP and 1 account with S/MIME
+  hasBothEncryptionTechnologies();
+  updateEncryptionTechnology();
+
   // Not yet implemented
   gOptionalEncryption = false;
   gOptionalEncryptionInitial = gOptionalEncryption;
@@ -4012,6 +4414,7 @@ function adjustSignEncryptAfterIdentityC
   if (gEncryptSubject && !configuredOpenPGP) {
     gEncryptSubject = false;
   }
+  updateEncryptedSubject();

   // A draft/template message may be stored encrypted, even if the user hasn't
   // requested encryption for sending. In that scenario, we'd see that
@@ -4041,7 +4444,26 @@ function adjustSignEncryptAfterIdentityC
     gSMFields.signMessage = gSendSigned;
   }

-  setEncSigStatusUI();
+  // Enable the encryption widgets iff at least one encryption technology is available
+  enableEncryptionWidgets(configuredOpenPGP || configuredSMIME);
+}
+
+async function enableEncryptionWidgets(state) {
+  if (state) {
+    document.getElementById("button-encryption").disabled = false;
+    document.getElementById("button-encryption-technology").disabled = false;
+    document.getElementById("encryptionMenu").disabled = false;
+    setSendEncrypted(gSendEncrypted);
+  } else {
+    document.getElementById("button-encryption").disabled = true;
+    document.getElementById("button-encryption-technology").disabled = true;
+    document.getElementById("encryptionMenu").disabled = true;
+    document.getElementById("button-encryption").label = await document.l10n.formatValue("encryption");
+    document.getElementById("button-encryption").setAttribute("checked", true);
+    //document.getElementById("subjectLabel").value = await document.l10n.formatValue("subject-without-openpgp");
+    document.getElementById("msgSubject").classList.remove("with-openpgp");
+    document.getElementById("msgEncryptedSubjectIcon").hidden = true;
+  }
 }

 function ComposeLoad() {
@@ -4391,18 +4813,7 @@ function ComposeUnload() {
   MsgComposeCloseWindow();
 }

-function setEncSigStatusUI() {
-  if (MailConstants.MOZ_OPENPGP && BondOpenPGP.isEnabled()) {
-    document.getElementById("signing-status").hidden = !gSendSigned;
-    document.getElementById("encryption-status").hidden = !gSendEncrypted;
-
-    let tech = document.getElementById("encryption-tech");
-    tech.textContent = gSelectedTechnologyIsPGP ? "OpenPGP" : "S/MIME";
-    tech.hidden = !gSendSigned && !gSendEncrypted;
-  }
-}
-
-function onSecurityChoice(value) {
+function onEncryptionChoice(value) {
   switch (value) {
     case "enc0":
       setGlobalEncryptMessage(0);
@@ -4425,24 +4836,46 @@ function onSecurityChoice(value) {
       break;

     case "encsub":
-      toggleEncryptSubject();
+      toggleEncryptedSubject();
+      break;
+
+    case "status":
+      showMessageComposeSecurityStatus();
       break;

+    case undefined:
+      // Toggle encryption when toolbar button is clicked
+      if (gSendEncrypted) {
+        setGlobalEncryptMessage(0);
+      } else {
+        setGlobalEncryptMessage(2);
+      };
+      break;
+  }
+}
+
+function onEncryptionTechnologyChoice(value) {
+  switch (value) {
     case "OpenPGP":
-      gSelectedTechnologyIsPGP = true;
-      setEncSigStatusUI();
+      if (isPgpConfigured()) {
+        gSelectedTechnologyIsPGP = true;
+      }
       break;

     case "SMIME":
-      gSelectedTechnologyIsPGP = false;
-      setEncSigStatusUI();
+      if (isSmimeEncryptionConfigured()) {
+        gSelectedTechnologyIsPGP = false;
+      }
       break;

-    case "status":
-    case undefined: // toolbar button was clicked
-      showMessageComposeSecurityStatus();
+    case undefined:
+      // Toggle encryption technology when toolbar button is clicked
+      if (isPgpConfigured() && isSmimeEncryptionConfigured()) {
+        gSelectedTechnologyIsPGP = !gSelectedTechnologyIsPGP;
+      }
       break;
   }
+  updateEncryptionTechnology();
 }

 var SecurityController = {
@@ -4467,6 +4900,59 @@ var SecurityController = {
   },
 };

+async function updateEncryptionTechnology() {
+  if (gDualEncryptionTechnology) {
+    document.getElementById("button-encryption-technology").hidden = false;
+    document.getElementById("encTech_OpenPGP_Toolbar").hidden = false;
+    document.getElementById("encTech_SMIME_Toolbar").hidden = false;
+    document.getElementById("encTech_OpenPGP_Menubar").hidden = false;
+    document.getElementById("encTech_SMIME_Menubar").hidden = false;
+  }
+  if (gDualEncryptionTechnology || gSelectedTechnologyIsPGP) {
+    document.getElementById("menu_securityMyPublicKey_Menubar").hidden = false;
+    document.getElementById("menu_securityEncryptSubject_Menubar").hidden = false;
+    document.getElementById("menu_securityMyPublicKey_Toolbar").hidden = false;
+    document.getElementById("menu_securityEncryptSubject_Toolbar").hidden = false;
+  }
+  if (gSelectedTechnologyIsPGP) {
+    document.getElementById("button-encryption-technology").label = "OpenPGP";
+    document.getElementById("menu_securityStatus_Menubar").label = "Manage Keys for Recipients";
+    document.getElementById("menu_securityStatus_Toolbar").label = "Manage Keys for Recipients";
+    //document.getElementById("subjectLabel").value = await document.l10n.formatValue("subject-with-openpgp");
+    document.getElementById("msgSubject").classList.add("with-openpgp");
+    document.getElementById("msgEncryptedSubjectIcon").hidden = false;
+    document.getElementById("menu_securityMyPublicKey_Menubar").disabled = false;
+    document.getElementById("menu_securityEncryptSubject_Menubar").disabled = false;
+    document.getElementById("menu_securityMyPublicKey_Toolbar").disabled = false;
+    document.getElementById("menu_securityEncryptSubject_Toolbar").disabled = false;
+  } else {
+    document.getElementById("button-encryption-technology").label = "S/MIME";
+    document.getElementById("menu_securityStatus_Menubar").label = "Manage Certificates for Recipients";
+    document.getElementById("menu_securityStatus_Toolbar").label = "Manage Certificates for Recipients";
+    //document.getElementById("subjectLabel").value = await document.l10n.formatValue("subject-without-openpgp");
+    document.getElementById("msgSubject").classList.remove("with-openpgp");
+    document.getElementById("msgEncryptedSubjectIcon").hidden = true;
+    document.getElementById("menu_securityMyPublicKey_Menubar").disabled = true;
+    document.getElementById("menu_securityEncryptSubject_Menubar").disabled = true;
+    document.getElementById("menu_securityMyPublicKey_Toolbar").disabled = true;
+    document.getElementById("menu_securityEncryptSubject_Toolbar").disabled = true;
+  }
+}
+
+function updateEncryptedSubject() {
+  let encryptedSubjectIcon = document.getElementById("msgEncryptedSubjectIcon");
+  if (gSendEncrypted) {
+    encryptedSubjectIcon.hidden = false;
+    if (gEncryptSubject) {
+      encryptedSubjectIcon.setAttribute("src", "chrome://messenger/skin/icons/privacy-security.svg");
+    } else {
+      encryptedSubjectIcon.setAttribute("src", "chrome://messenger/skin/icons/message-encrypted-notok.svg");
+    }
+  } else {
+    encryptedSubjectIcon.hidden = true;
+  }
+}
+
 /**
  * Update the aria labels of all non-custom address inputs and all pills in the
  * addressing area. Also update the tooltips of the close labels of all address
@@ -9772,7 +10258,19 @@ function mailContextOnPopupHiding() {}
  */
 function setSendEncrypted(encrypted) {
   gSendEncrypted = encrypted;
+  updateEncryptionToggle();
   window.dispatchEvent(
     new CustomEvent("sendencryptedchange", { detail: { encrypted } })
   );
 }
+
+async function updateEncryptionToggle() {
+  if (gSendEncrypted) {
+    document.getElementById("button-encryption").label = await document.l10n.formatValue("encryption-on");
+    document.getElementById("button-encryption").setAttribute("checked", true);
+  } else {
+    document.getElementById("button-encryption").label = await document.l10n.formatValue("encryption-off");
+    document.getElementById("button-encryption").setAttribute("checked", false);
+  }
+  updateEncryptedSubject();
+}
diff --git a/mail/components/compose/content/messengercompose.xhtml b/mail/components/compose/content/messengercompose.xhtml
--- a/mail/components/compose/content/messengercompose.xhtml
+++ b/mail/components/compose/content/messengercompose.xhtml
@@ -1759,46 +1759,37 @@
           <menuseparator/>
           <menuitem type="checkbox" command="cmd_customizeFromAddress"
                     accesskey="&customizeFromAddress.accesskey;"/>
+        </menupopup>
+      </menu>

-#ifdef MOZ_OPENPGP
-          <menuseparator id="encryptTechOptionsSeparator_Menubar"
-                         class="openpgp-item"/>
+      <menu id="encryptionMenu" label="&encryptionMenu.label;" accesskey="&encryptionMenu.accesskey;">
+        <menupopup onpopupshowing="setSecuritySettings('_Menubar');">

-          <menu id="menu_encTech_Menubar" class="openpgp-item"
-                label="&menu_securityTech.label;" accesskey="&menu_securityTech.accesskey;">
-            <menupopup id="button-encTech_Menubar" oncommand="onSecurityChoice(event.target.value);">
-              <menuitem id="encTech_OpenPGP_Menubar"
-                        label="&menu_techPGP.label;" accesskey="&menu_techPGP.accesskey;"
-                        value="OpenPGP" type="radio" name="radiogroup_encTech"/>
-              <menuitem id="encTech_SMIME_Menubar"
-                        label="&menu_techSMIME.label;" accesskey="&menu_techSMIME.accesskey;"
-                        value="SMIME" type="radio" name="radiogroup_encTech"/>
-            </menupopup>
-          </menu>
-#endif
+          <menuitem id="encTech_OpenPGP_Menubar"
+                    label="&menu_techPGP.label;" accesskey="&menu_techPGP.accesskey;"
+                    value="OpenPGP" type="radio" name="radiogroup_encTech"
+                    hidden="true"
+                    oncommand="onEncryptionTechnologyChoice(event.target.value);"/>
+          <menuitem id="encTech_SMIME_Menubar"
+                    label="&menu_techSMIME.label;" accesskey="&menu_techSMIME.accesskey;"
+                    value="SMIME" type="radio" name="radiogroup_encTech"
+                    hidden="true"
+                    oncommand="onEncryptionTechnologyChoice(event.target.value);"/>

           <menuseparator id="encryptOptionsSeparator_Menubar"/>

+          <menuitem id="menu_securityEncryptRequire_Menubar"
+                    type="radio" name="radiogroup_encEnable"
+                    label="&menu_securityEncryptRequire2.label;"
+                    accesskey="&menu_securityEncryptRequire.accesskey;"
+                    value="enc2"
+                    oncommand="onEncryptionChoice(event.target.value);"/>
           <menuitem id="menu_securityEncryptDisable_Menubar"
                     type="radio" name="radiogroup_encEnable"
                     label="&menu_securityDoNotEncrypt.label;"
                     accesskey="&menu_securityDoNotEncrypt.accesskey;"
                     value="enc0"
-                    oncommand="onSecurityChoice(event.target.value);"/>
-          <!--
-          <menuitem id="menu_securityEncryptOptional_Menubar"
-                    type="radio" name="radiogroup_encEnable"
-                    label="&menu_securityEncryptOptional.label;"
-                    accesskey="&menu_securityEncryptOptional.accesskey;"
-                    value="enc1"
-                    oncommand="onSecurityChoice(event.target.value);"/>
-          -->
-          <menuitem id="menu_securityEncryptRequire_Menubar"
-                    type="radio" name="radiogroup_encEnable"
-                    label="&menu_securityEncryptRequire2.label;"
-                    accesskey="&menu_securityEncryptRequire.accesskey;"
-                    value="enc2"
-                    oncommand="onSecurityChoice(event.target.value);"/>
+                    oncommand="onEncryptionChoice(event.target.value);"/>

           <menuseparator id="signOptionsSeparator_Menubar"/>

@@ -1807,29 +1798,31 @@
                     label="&menu_securitySign.label;"
                     accesskey="&menu_securitySign.accesskey;"
                     value="sig"
-                    oncommand="onSecurityChoice(event.target.value);"/>
+                    oncommand="onEncryptionChoice(event.target.value);"/>

 #ifdef MOZ_OPENPGP
-        <menuseparator id="sepOpenPGP_Menubar"
-                       class="openpgp-item"/>
+          <menuitem id="menu_securityEncryptSubject_Menubar"
+                    class="openpgp-item encrypt-subject"
+                    type="checkbox"
+                    data-l10n-id="compose-menu-encrypt-subject"
+                    value="encsub"
+                    oncommand="onEncryptionChoice(event.target.value);"/>
+          <menuitem id="menu_securityMyPublicKey_Menubar"
+                    class="openpgp-item"
+                    type="checkbox"
+                    data-l10n-id="compose-menu-attach-key"
+                    value="mykey"
+                    oncommand="onEncryptionChoice(event.target.value);"/>
+#endif

-        <menu id="menu_OpenPGPOptions_Menubar" class="openpgp-item"
-              label="OpenPGP">
-          <menupopup id="button_OpenPGPOptions_Menubar">
-            <menuitem id="menu_securityMyPublicKey_Menubar" class="openpgp-item"
-                      type="checkbox"
-                      data-l10n-id="compose-menu-attach-key"
-                      value="mykey"
-                      oncommand="onSecurityChoice(event.target.value);"/>
-            <menuitem id="menu_securityEncryptSubject_Menubar" class="openpgp-item"
-                      type="checkbox"
-                      data-l10n-id="compose-menu-encrypt-subject"
-                      value="encsub"
-                      oncommand="onSecurityChoice(event.target.value);"/>
+          <menuseparator id="statusInfoSeparator"/>
+
+          <menuitem id="menu_securityStatus_Menubar"
+                    label="&menu_securityStatus.label;"
+                    accesskey="&menu_securityStatus.accesskey;"
+                    value="status"
+                    oncommand="onEncryptionChoice(event.target.value);"/>
           </menupopup>
-        </menu>
-#endif
-        </menupopup>
       </menu>

       <menu id="tasksMenu" label="&tasksMenu.label;" accesskey="&tasksMenu.accesskey;">
@@ -1930,46 +1923,24 @@
       </menupopup>
     </toolbarbutton>

-    <toolbarbutton is="toolbarbutton-menu-button" id="button-security"
+    <toolbarbutton is="toolbarbutton-menu-button" id="button-encryption"
                    type="menu-button"
                    class="toolbarbutton-1"
-                   label="&securityButton.label;"
-                   tooltiptext="&securityButton.tooltip;"
-                   oncommand="onSecurityChoice(event.target.value);">
+                   label="&encryptionButton.label;"
+                   tooltiptext="&encryptionButton.tooltip;"
+                   oncommand="onEncryptionChoice(event.target.value);">
       <menupopup onpopupshowing="setSecuritySettings('_Toolbar');">
-#ifdef MOZ_OPENPGP
-        <menu id="menu_encTech_Toolbar" class="openpgp-item"
-              label="&menu_securityTech.label;" accesskey="&menu_securityTech.accesskey;">
-          <menupopup id="button-encTech_Toolbar">
-            <menuitem id="encTech_OpenPGP_Toolbar"
-                      label="&menu_techPGP.label;" accesskey="&menu_techPGP.accesskey;"
-                      value="OpenPGP" type="radio" name="radiogroup_encTech"/>
-            <menuitem id="encTech_SMIME_Toolbar"
-                      label="&menu_techSMIME.label;" accesskey="&menu_techSMIME.accesskey;"
-                      value="SMIME" type="radio" name="radiogroup_encTech"/>
-          </menupopup>
-        </menu>
-#endif

-        <menuseparator id="encryptOptionsSeparator_Toolbar"/>
-
+        <menuitem id="menu_securityEncryptRequire_Toolbar"
+                  type="radio" name="radiogroup_encEnable"
+                  label="&menu_securityEncryptRequire2.label;"
+                  accesskey="&menu_securityEncryptRequire.accesskey;"
+		  value="enc2"/>
         <menuitem id="menu_securityEncryptDisable_Toolbar"
                   type="radio" name="radiogroup_encEnable"
                   label="&menu_securityDoNotEncrypt.label;"
                   accesskey="&menu_securityDoNotEncrypt.accesskey;"
                   value="enc0"/>
-        <!--
-        <menuitem id="menu_securityEncryptOptional_Toolbar"
-                  type="radio" name="radiogroup_encEnable"
-                  label="&menu_securityEncryptOptional.label;"
-                  accesskey="&menu_securityEncryptOptional.accesskey;"
-                  value="enc1"/>
-        -->
-        <menuitem id="menu_securityEncryptRequire_Toolbar"
-                  type="radio" name="radiogroup_encEnable"
-                  label="&menu_securityEncryptRequire2.label;"
-                  accesskey="&menu_securityEncryptRequire.accesskey;"
-                  value="enc2"/>

         <menuseparator id="signOptionsSeparator_Toolbar"/>

@@ -1980,26 +1951,20 @@
                   value="sig"/>

 #ifdef MOZ_OPENPGP
-        <menuseparator id="sepOpenPGP_Toolbar"
-                       class="openpgp-item"/>
-        <menu id="menu_OpenPGPOptions_Toolbar" class="openpgp-item"
-              label="OpenPGP">
-          <menupopup id="button_OpenPGPOptions_Toolbar">
-            <menuitem id="menu_securityMyPublicKey_Toolbar"
-                      class="openpgp-item"
-                      type="checkbox"
-                      data-l10n-id="compose-menu-attach-key"
-                      value="mykey"/>
-            <menuitem id="menu_securityEncryptSubject_Toolbar"
-                      class="openpgp-item"
-                      type="checkbox"
-                      data-l10n-id="compose-menu-encrypt-subject"
-                      value="encsub"/>
-          </menupopup>
-        </menu>
+        <menuitem id="menu_securityEncryptSubject_Toolbar"
+                  class="openpgp-item encrypt-subject"
+                  type="checkbox"
+                  data-l10n-id="compose-menu-encrypt-subject"
+		  value="encsub"/>
+        <menuitem id="menu_securityMyPublicKey_Toolbar"
+                  class="openpgp-item"
+                  type="checkbox"
+                  data-l10n-id="compose-menu-attach-key"
+                  value="mykey"/>
 #endif

         <menuseparator id="statusInfoSeparator"/>
+
         <menuitem id="menu_securityStatus_Toolbar"
                   label="&menu_securityStatus.label;"
                   accesskey="&menu_securityStatus.accesskey;"
@@ -2007,6 +1972,25 @@
       </menupopup>
     </toolbarbutton>

+    <toolbarbutton is="toolbarbutton-menu-button" id="button-encryption-technology"
+                   type="menu-button"
+                   class="toolbarbutton-1"
+                   label="&encryptionTechnologyButton.label;"
+                   hidden="true"
+                   tooltiptext="&encryptionTechnologyButton.tooltip;"
+                   oncommand="onEncryptionTechnologyChoice(event.target.value);">
+      <menupopup onpopupshowing="setSecuritySettings('_Toolbar');">
+        <menuitem id="encTech_OpenPGP_Toolbar"
+                  label="&menu_techPGP.label;" accesskey="&menu_techPGP.accesskey;"
+                  value="OpenPGP" type="radio" name="radiogroup_encTech"
+                  hidden="true"/>
+        <menuitem id="encTech_SMIME_Toolbar"
+                  label="&menu_techSMIME.label;" accesskey="&menu_techSMIME.accesskey;"
+                  value="SMIME" type="radio" name="radiogroup_encTech"
+                  hidden="true"/>
+      </menupopup>
+    </toolbarbutton>
+
     <toolbarbutton is="toolbarbutton-menu-button" id="spellingButton"
                    type="menu-button"
                    class="toolbarbutton-1"
@@ -2109,7 +2093,7 @@
 #ifdef XP_MACOSX
            iconsize="small"
 #endif
-           defaultset="button-send,separator,button-address,spellingButton,button-security,button-save,spring,button-attach"
+           defaultset="button-send,separator,button-encryption,button-encryption-technology,button-address,spellingButton,button-save,spring,button-attach"
            customizable="true"
            context="toolbar-context-menu">
   </toolbar>
@@ -2459,8 +2443,12 @@
                   <label id="subjectLabel" value="&subject2.label;"
                          accesskey="&subject.accesskey;" control="msgSubject"/>
                 </hbox>
-                <hbox flex="1" align="center" class="input-container">
+                <hbox flex="1" id="msgSubjectContainer" align="center" class="input-container">
                   <moz-input-box spellcheck="true" style="flex: 1;">
+                    <html:img id="msgEncryptedSubjectIcon"
+                              src="chrome://messenger/skin/icons/privacy-security.svg"
+                              onclick="toggleEncryptedSubject(event);"
+                              alt="" />
                     <html:input id="msgSubject"
                                 type="text"
                                 class="input-inline textbox-input"
@@ -2588,17 +2576,6 @@
                    value="0" max="100"
                    hidden="hidden">
     </html:progress>
-#ifdef MOZ_OPENPGP
-    <html:span id="encryption-tech" hidden="hidden"></html:span>
-    <html:img id="signing-status"
-              data-l10n-id="message-to-be-signed-icon"
-              src="chrome://messenger/skin/icons/message-signed-ok.svg"
-              hidden="hidden" />
-    <html:img id="encryption-status"
-              data-l10n-id="message-to-be-encrypted-icon"
-              src="chrome://messenger/skin/icons/connection-secure.svg"
-              hidden="hidden" />
-#endif
     <html:button id="languageStatusButton"
                  class="plain-button"
                  aria-expanded="false"
diff --git a/mail/extensions/am-e2e/am-e2e.inc.xhtml b/mail/extensions/am-e2e/am-e2e.inc.xhtml
--- a/mail/extensions/am-e2e/am-e2e.inc.xhtml
+++ b/mail/extensions/am-e2e/am-e2e.inc.xhtml
@@ -180,29 +180,18 @@
       <html:fieldset id="encryption_titlebox">
         <description flex="1">&e2eEnc.description;</description>

-        <radiogroup id="encryptionChoices" class="indent">
-          <radio id="encrypt_no" wsm_persist="true" value="0"
-                 label="&doNotEncrypt.label;"
-                 accesskey="&doNotEncrypt.accesskey;"/>
-          <!--
-          <radio id="encrypt_allow" wsm_persist="true" value="1"
-                 label=""/>
-          -->
-          <radio id="encrypt_require" wsm_persist="true" value="2"
-                 label="&requireEncryptMessage.label;"
-                 accesskey="&requireEncryptMessage.accesskey;"/>
-        </radiogroup>
-
+        <checkbox id="identity_encrypt_email" class="indent" wsm_persist="true"
+                  label="&encryptEmail.label;" accesskey="&encryptEmail.accesskey;"/>
         <hbox class="indent">
           <description flex="1" class="option-description tip-caption">
-            &e2eeReqWarning.description;
+            &encryptEmail.description;
           </description>
         </hbox>

         <separator/>

         <description flex="1">&e2eSigning.description;</description>
-        <checkbox id="identity_sign_mail" wsm_persist="true"
+        <checkbox id="identity_sign_mail" class="indent" wsm_persist="true"
                   prefstring="mail.identity.%identitykey%.sign_mail"
                   label="&signMessage2.label;" accesskey="&signMessage.accesskey;"/>

diff --git a/mail/extensions/am-e2e/am-e2e.js b/mail/extensions/am-e2e/am-e2e.js
--- a/mail/extensions/am-e2e/am-e2e.js
+++ b/mail/extensions/am-e2e/am-e2e.js
@@ -45,7 +45,7 @@ var email_recipient_cert_usage = 5; // S

 var gIdentity;
 var gEncryptionCertName = null;
-var gEncryptionChoices = null;
+var gEncryptEmails = null;
 var gSignCertName = null;
 var gTechChoices = null;
 var gSignMessages = null;
@@ -78,11 +78,9 @@ function onInit() {
 async function initE2EEncryption(identity) {
   // Initialize all of our elements based on the current identity values...
   gEncryptionCertName = document.getElementById(kEncryptionCertPref);
-  gEncryptionChoices = document.getElementById("encryptionChoices");
+  gEncryptEmails = document.getElementById("identity_encrypt_email");
   gSignCertName = document.getElementById(kSigningCertPref);
   gSignMessages = document.getElementById("identity_sign_mail");
-  gRequireEncrypt = document.getElementById("encrypt_require");
-  gDoNotEncrypt = document.getElementById("encrypt_no");
   gAttachKey = document.getElementById("identity_attach_key");
   gEncryptSubject = document.getElementById("identity_encrypt_subject");
   gEncryptDrafts = document.getElementById("identity_encrypt_drafts");
@@ -110,13 +108,11 @@ async function initE2EEncryption(identit
     gSignCertName.displayName = "";
     gSignCertName.dbKey = "";

-    gRequireEncrypt.disabled = true;
-    gDoNotEncrypt.disabled = true;
     gEncryptSubject.disabled = true;
     gEncryptDrafts.disabled = true;
     gSignMessages.disabled = true;
     gSignMessages.checked = false;
-    gEncryptionChoices.value = 0;
+    gEncryptEmails.checked = true;
     if (MailConstants.MOZ_OPENPGP && BondOpenPGP.isEnabled()) {
       gTechChoices.value = 0;
     }
@@ -180,7 +176,7 @@ function initSMIMESettings() {
     }
   } catch (e) {}

-  gEncryptionChoices.value = gIdentity.getIntAttribute("encryptionpolicy");
+  gEncryptEmails.checked = (gIdentity.getIntAttribute("encryptionpolicy") > 0);
   if (MailConstants.MOZ_OPENPGP && BondOpenPGP.isEnabled()) {
     gTechChoices.value = gIdentity.getIntAttribute("e2etechpref");
   }
@@ -252,7 +248,7 @@ function onSave() {
 function saveE2EEncryptionSettings(identity) {
   // Find out which radio for the encryption radio group is selected and set
   // that on our hidden encryptionChoice pref.
-  let newValue = gEncryptionChoices.value;
+  let newValue = gEncryptEmails.checked ? 2 : 0;
   identity.setIntAttribute("encryptionpolicy", newValue);

   if (MailConstants.MOZ_OPENPGP && BondOpenPGP.isEnabled()) {
@@ -449,10 +445,9 @@ function smimeSelectCert(smime_cert) {
 }

 function enableEncryptionControls(do_enable) {
-  gRequireEncrypt.disabled = !do_enable;
-  gDoNotEncrypt.disabled = !do_enable;
+  gEncryptEmails.disabled = !do_enable;
   if (!do_enable) {
-    gEncryptionChoices.value = 0;
+    gEncryptEmails.checked = true;
   }
   // If we have a certificate or key configured that allows encryption,
   // then we are able to encrypt drafts, too.
diff --git a/mail/extensions/openpgp/content/modules/keyRing.jsm b/mail/extensions/openpgp/content/modules/keyRing.jsm
--- a/mail/extensions/openpgp/content/modules/keyRing.jsm
+++ b/mail/extensions/openpgp/content/modules/keyRing.jsm
@@ -984,6 +984,11 @@ var EnigmailKeyRing = {
     return this._getValidityLevelIgnoringAcceptance(keyObj, null) == 0;
   },

+  isExpired(keyObj) {
+    var nowDate = new Date();
+    return keyObj.expiryTime != 0 && keyObj.expiryTime < nowDate.valueOf() / 1000;
+  },
+
   // returns an acceptanceLevel from -1 to 3,
   // or -2 for "doesn't match email" or "not usable"
   async isValidKeyForRecipient(keyObj, emailAddr) {
diff --git a/mail/extensions/openpgp/content/ui/enigmailMsgComposeOverlay.js b/mail/extensions/openpgp/content/ui/enigmailMsgComposeOverlay.js
--- a/mail/extensions/openpgp/content/ui/enigmailMsgComposeOverlay.js
+++ b/mail/extensions/openpgp/content/ui/enigmailMsgComposeOverlay.js
@@ -670,7 +670,6 @@ Enigmail.msg = {
       } else if (useSMIMEUnlessWeKnowOtherwise) {
         gSelectedTechnologyIsPGP = false;
       }
-      setEncSigStatusUI();
     }

     // check for attached signature files and remove them
@@ -2606,7 +2605,6 @@ Enigmail.msg = {
       gIsRelatedToEncryptedOriginal = true;
       setSendEncrypted(gSendEncrypted);
       gSendSigned = true;
-      setEncSigStatusUI();
     }
     //}

diff --git a/mail/extensions/openpgp/content/ui/keyDetailsDlg.js b/mail/extensions/openpgp/content/ui/keyDetailsDlg.js
--- a/mail/extensions/openpgp/content/ui/keyDetailsDlg.js
+++ b/mail/extensions/openpgp/content/ui/keyDetailsDlg.js
@@ -145,8 +145,8 @@ async function reloadData(firstLoad) {
     return;
   }

-  let acceptanceIntro1Text = "";
-  let acceptanceIntro2Text = "";
+  let acceptanceIntroText = "";
+  let acceptanceVerificationText = "";

   if (keyObj.fpr) {
     gFingerprint = keyObj.fpr;
@@ -207,8 +207,8 @@ async function reloadData(firstLoad) {
   if (gModePersonal) {
     gPersonalRadio.removeAttribute("hidden");
     gAcceptanceRadio.setAttribute("hidden", "true");
-    acceptanceIntro1Text = "key-accept-personal";
-    acceptanceIntro2Text = "key-personal-warning";
+    acceptanceIntroText = "key-accept-personal";
+    acceptanceVerificationText = "key-personal-warning";
     let value = l10n.formatValueSync("key-type-pair");
     setLabel("keyType", value);

@@ -236,14 +236,14 @@ async function reloadData(firstLoad) {
     if (!isStillValid) {
       gAcceptanceRadio.setAttribute("hidden", "true");
       if (keyObj.keyTrust == "r") {
-        acceptanceIntro1Text = "key-revoked-simple";
+        acceptanceIntroText = "key-revoked-simple";
       } else if (keyObj.keyTrust == "e" || keyIsExpired) {
-        acceptanceIntro1Text = "key-expired-simple";
+        acceptanceIntroText = "key-expired-simple";
       }
     } else {
       gAcceptanceRadio.removeAttribute("hidden");
-      acceptanceIntro1Text = "key-do-you-accept";
-      acceptanceIntro2Text = "key-accept-warning";
+      acceptanceIntroText = "key-do-you-accept";
+      acceptanceVerificationText = "key-verification";
       gUpdateAllowed = true;

       //await RNP.calculateAcceptance(keyObj.keyId, null);
@@ -269,14 +269,14 @@ async function reloadData(firstLoad) {
       }
     }
   }
-  if (acceptanceIntro1Text) {
-    let acceptanceIntro1 = document.getElementById("acceptanceIntro1");
-    document.l10n.setAttributes(acceptanceIntro1, acceptanceIntro1Text);
+  if (acceptanceIntroText) {
+    let acceptanceIntro = document.getElementById("acceptanceIntro");
+    document.l10n.setAttributes(acceptanceIntro, acceptanceIntroText);
   }

-  if (acceptanceIntro2Text) {
-    let acceptanceIntro2 = document.getElementById("acceptanceIntro2");
-    document.l10n.setAttributes(acceptanceIntro2, acceptanceIntro2Text);
+  if (acceptanceVerificationText) {
+    let acceptanceVerification = document.getElementById("acceptanceVerification");
+    document.l10n.setAttributes(acceptanceVerification, acceptanceVerificationText, { addr: EnigmailFuncs.getEmailFromUserID(gUserId).toLowerCase() });
   }

   // Resize the dialog only if the data was changed since the first load.
diff --git a/mail/extensions/openpgp/content/ui/keyDetailsDlg.xhtml b/mail/extensions/openpgp/content/ui/keyDetailsDlg.xhtml
--- a/mail/extensions/openpgp/content/ui/keyDetailsDlg.xhtml
+++ b/mail/extensions/openpgp/content/ui/keyDetailsDlg.xhtml
@@ -96,9 +96,7 @@
     <tabpanels flex="1" id="mainTabPanel">
        <!-- Acceptance Tab -->
       <vbox id="acceptancePanel" flex="1">
-        <description id="acceptanceIntro1"/>
-        <separator class="thin"/>
-        <description id="acceptanceIntro2"/>
+        <description id="acceptanceIntro"/>
         <separator class="thin"/>

         <html:div>
@@ -121,6 +119,9 @@
             </radiogroup>
           </html:fieldset>
         </html:div>
+
+        <separator class="thin"/>
+        <description id="acceptanceVerification"/>
       </vbox>

       <!-- certifications tab -->
diff --git a/mail/locales/en-US/chrome/messenger-smime/msgCompSMIMEOverlay.dtd b/mail/locales/en-US/chrome/messenger-smime/msgCompSMIMEOverlay.dtd
--- a/mail/locales/en-US/chrome/messenger-smime/msgCompSMIMEOverlay.dtd
+++ b/mail/locales/en-US/chrome/messenger-smime/msgCompSMIMEOverlay.dtd
@@ -4,33 +4,35 @@

 <!--LOCALIZATION NOTE msgCompSMIMEOverlay.dtd UI for s/mime hooks in message composition -->

-<!ENTITY menu_securityDoNotEncrypt.label "Do Not Encrypt">
-<!ENTITY menu_securityDoNotEncrypt.accesskey "o">
+<!ENTITY menu_securityDoNotEncrypt.label "Encryption Off">
+<!ENTITY menu_securityDoNotEncrypt.accesskey "f">

 <!-- not yet used
 <!ENTITY menu_securityEncryptOptional.label "Allow Encryption">
 <!ENTITY menu_securityEncryptOptional.accesskey "w">
 -->

-<!ENTITY menu_securityEncryptRequire2.label "Require Encryption">
-<!ENTITY menu_securityEncryptRequire.accesskey "E">
+<!ENTITY menu_securityEncryptRequire2.label "Encryption On">
+<!ENTITY menu_securityEncryptRequire.accesskey "n">

-<!ENTITY menu_securitySign.label "Digitally Sign This Message">
-<!ENTITY menu_securitySign.accesskey "M">
-
-<!ENTITY menu_securityTech.label "Encryption Technology">
-<!ENTITY menu_securityTech.accesskey "T">
+<!ENTITY menu_securitySign.label "Sign">
+<!ENTITY menu_securitySign.accesskey "s">

 <!ENTITY menu_techPGP.label "OpenPGP">
 <!ENTITY menu_techPGP.accesskey "O">
 <!ENTITY menu_techSMIME.label "S/MIME">
 <!ENTITY menu_techSMIME.accesskey "S">

-<!ENTITY menu_securityStatus.label "View Security Info">
-<!ENTITY menu_securityStatus.accesskey "I">
+<!ENTITY menu_securityStatus.label "Manage Recipients">
+<!ENTITY menu_securityStatus.accesskey "M">

-<!ENTITY securityButton.label "Security">
-<!ENTITY securityButton.tooltip "View or change security settings">
+<!ENTITY encryptionButton.label "Encryption">
+<!ENTITY encryptionButton.tooltip "View or change encryption settings">
+
+<!ENTITY encryptionTechnologyButton.label "Technology">
+<!ENTITY encryptionTechnologyButtonOpenPGP.label "OpenPGP">
+<!ENTITY encryptionTechnologyButtonSMIME.label "S/MIME">
+<!ENTITY encryptionTechnologyButton.tooltip "Change encryption technology">

 <!ENTITY menu_viewSecurityStatus.label "Message Security Info">
 <!ENTITY menu_viewSecurityStatus.accesskey "I">
diff --git a/mail/locales/en-US/chrome/messenger/am-smime.dtd b/mail/locales/en-US/chrome/messenger/am-smime.dtd
--- a/mail/locales/en-US/chrome/messenger/am-smime.dtd
+++ b/mail/locales/en-US/chrome/messenger/am-smime.dtd
@@ -6,15 +6,13 @@
 <!ENTITY e2eLearnMore.label "Learn more">

 <!ENTITY e2eEnc.description "Without end-to-end encryption the contents of messages are easily exposed to your email provider and to mass surveillance.">
-<!ENTITY e2eeReqWarning.description "If you require encryption, to send a message you must have the public key or certificate of every recipient.">

 <!ENTITY e2eSigning.description "A digital signature allows recipients to verify the message was sent by you, and that the content has not been changed.">
 <!ENTITY e2eTechPref.description "Preferred encryption technology:">

-<!ENTITY doNotEncrypt.label "Do not enable encryption by default">
-<!ENTITY doNotEncrypt.accesskey "N">
-<!ENTITY requireEncryptMessage.label "Require encryption by default">
-<!ENTITY requireEncryptMessage.accesskey "u">
+<!ENTITY encryptEmail.label "Encrypt as much as possible">
+<!ENTITY encryptEmail.accesskey "E">
+<!ENTITY encryptEmail.description "You will be asked to confirm before sending an email unencrypted.">
 <!ENTITY encryptionCert2.message "Personal certificate for encryption:">
 <!ENTITY digitalSign.certificate.button "Select…">
 <!ENTITY digitalSign.certificate.accesskey "S">
diff --git a/mail/locales/en-US/chrome/messenger/messengercompose/messengercompose.dtd b/mail/locales/en-US/chrome/messenger/messengercompose/messengercompose.dtd
--- a/mail/locales/en-US/chrome/messenger/messengercompose/messengercompose.dtd
+++ b/mail/locales/en-US/chrome/messenger/messengercompose/messengercompose.dtd
@@ -140,6 +140,10 @@
 <!ENTITY quoteCmd.label "Quote Message">
 <!ENTITY quoteCmd.accesskey "Q">

+<!-- Encryption Menu -->
+<!ENTITY encryptionMenu.label "Encryption">
+<!ENTITY encryptionMenu.accesskey "n">
+
 <!--LOCALIZATION NOTE attachVCard.label Don't translate the term 'vCard' -->
 <!ENTITY attachVCard.label "Attach Personal Card (vCard)">
 <!ENTITY attachVCard.accesskey "v">
@@ -227,6 +231,7 @@
 <!ENTITY newsgroupsAddr2.label "Newsgroup">
 <!ENTITY followupAddr2.label "Followup-To">
 <!ENTITY subject2.label "Subject">
+<!ENTITY encryptedSubject.label "Encrypted Subject">
 <!ENTITY subject.accesskey "S">
 <!ENTITY attachmentBucketCloseButton.tooltip "Hide the attachment pane">

diff --git a/mail/locales/en-US/messenger/openpgp/openpgp.ftl b/mail/locales/en-US/messenger/openpgp/openpgp.ftl
--- a/mail/locales/en-US/messenger/openpgp/openpgp.ftl
+++ b/mail/locales/en-US/messenger/openpgp/openpgp.ftl
@@ -276,13 +276,12 @@ openpgp-acceptance-unverified-label =
 openpgp-acceptance-verified-label =
     .label = Yes, I’ve verified in person this key has the correct fingerprint.
 key-accept-personal =
-    For this key, you have both the public and the secret part. You may use it as a personal key.
-    If this key was given to you by someone else, then don’t use it as a personal key.
-key-personal-warning = Did you create this key yourself, and the displayed key ownership refers to yourself?
+    You have both the public and secret key and can use it as a personal key.
+    Only use it as a personal key if you created it yourself.
 openpgp-personal-no-label =
     .label = No, don’t use it as my personal key.
 openpgp-personal-yes-label =
-    .label = Yes, treat this key as a personal key.
+    .label = Yes, use it as my personal key.

 openpgp-copy-cmd-label =
     .label = Copy
@@ -374,7 +373,7 @@ key-expired-date = The key expired on {
 key-expired-simple = The key has expired
 key-revoked-simple = The key was revoked
 key-do-you-accept = Do you accept this key for verifying digital signatures and for encrypting messages?
-key-accept-warning = Avoid accepting a rogue key. Use a communication channel other than email to verify the fingerprint of your correspondent’s key.
+key-verification = Verify the fingerprint of the key using a secure communication channel other than email to make sure that it's really the key of { $addr }.

 # Strings enigmailMsgComposeOverlay.js
 cannot-use-own-key-because = Unable to send the message, because there is a problem with your personal key. { $problem }
@@ -673,7 +672,7 @@ compose-menu-attach-key =
     .label = Attach My Public Key
     .accesskey = A
 compose-menu-encrypt-subject =
-    .label = Subject Encryption
+    .label = Encrypt Subject
     .accesskey = b

 # Strings used in decryption.jsm
@@ -724,3 +723,33 @@ dlg-button-skip = &Skip
 # Strings used in enigmailMsgBox.js
 enig-alert-title =
     .title = OpenPGP Alert
+
+# Encryption toggle
+encryption = Encryption
+encryption-on = Encryption On
+encryption-off = Encryption Off
+
+# Key notification
+key-notification-unavailable = You don't have a key for <b>{ $addr }</b>.
+key-notification-undecided = You have not accepted the key for <b>{ $addr }</b>.
+key-notification-rejected = You rejected the key for <b>{ $addr }</b>.
+key-notification-expired = The key for <b>{ $addr }</b> is expired.
+key-notification-summary = { $n } more key notifications&hellip;
+key-notification-encryption-off = Do Not Encrypt
+key-notification-manage-key = Manage Key&hellip;
+key-notification-search-key = Search on Key Servers&hellip;
+key-notification-show-all = Show All
+send-button-cannot-encrypt-tooltip = Some keys are missing to be able to encrypt. Review the pending key notifications or turn encryption off.
+never-encrypt-message = Do you want to turn encryption off automatically for { $addr } in future emails?
+never-encrypt-cancel = Never Encrypt
+never-encrypt-ok = Choose Each Time
+
+# Recipient pills
+pill-tooltip-key-missing = No key for { $addr }.
+pill-tooltip-key-undecided = Key for { $addr } is not accepted yet.
+pill-tooltip-key-expired = Key for { $addr } is expired.
+pill-tooltip-key-rejected = Key for { $addr } is rejected.
+
+# Subject encryption
+subject-without-openpgp = Subject
+subject-with-openpgp = Encrypted Subject
diff --git a/mail/test/browser/shared-modules/OpenPGPTestUtils.jsm b/mail/test/browser/shared-modules/OpenPGPTestUtils.jsm
--- a/mail/test/browser/shared-modules/OpenPGPTestUtils.jsm
+++ b/mail/test/browser/shared-modules/OpenPGPTestUtils.jsm
@@ -39,7 +39,7 @@ const OpenPGPTestUtils = {
   CAROL_KEY_ID: "3099FF1238852B9F",

   /**
-   * Given a compose message window, clicks on the "Digitally Sign This Message"
+   * Given a compose message window, clicks on the "Sign"
    * menu item.
    */
   async toggleMessageSigning(win) {
diff --git a/mail/themes/shared/jar.inc.mn b/mail/themes/shared/jar.inc.mn
--- a/mail/themes/shared/jar.inc.mn
+++ b/mail/themes/shared/jar.inc.mn
@@ -163,6 +163,7 @@
   skin/classic/messenger/icons/folder-new-indicator.svg       (../shared/mail/icons/folder-new-indicator.svg)
   skin/classic/messenger/icons/message-encrypted-ok.svg       (../shared/mail/icons/message-encrypted-ok.svg)
   skin/classic/messenger/icons/message-encrypted-notok.svg    (../shared/mail/icons/message-encrypted-notok.svg)
+  skin/classic/messenger/icons/unknown.svg                    (../shared/mail/icons/unknown.svg)
   skin/classic/messenger/icons/contact.svg                    (../shared/mail/icons/contact.svg)
   skin/classic/messenger/icons/conversation.svg               (../shared/mail/icons/conversation.svg)
   skin/classic/messenger/icons/decrease.svg                   (../shared/mail/icons/decrease.svg)
diff --git a/mail/themes/shared/mail/icons/unknown.svg b/mail/themes/shared/mail/icons/unknown.svg
new file mode 100644
--- /dev/null
+++ b/mail/themes/shared/mail/icons/unknown.svg
@@ -0,0 +1,64 @@
+<?xml version="1.0" encoding="UTF-8" standalone="no"?>
+<!-- This Source Code Form is subject to the terms of the Mozilla Public
+   - License, v. 2.0. If a copy of the MPL was not distributed with this
+   - file, You can obtain one at http://mozilla.org/MPL/2.0/. -->
+
+<svg
+   xmlns:dc="http://purl.org/dc/elements/1.1/"
+   xmlns:cc="http://creativecommons.org/ns#"
+   xmlns:rdf="http://www.w3.org/1999/02/22-rdf-syntax-ns#"
+   xmlns:svg="http://www.w3.org/2000/svg"
+   xmlns="http://www.w3.org/2000/svg"
+   xmlns:sodipodi="http://sodipodi.sourceforge.net/DTD/sodipodi-0.dtd"
+   xmlns:inkscape="http://www.inkscape.org/namespaces/inkscape"
+   width="16"
+   height="16"
+   viewBox="0 0 16 16"
+   fill="context-fill"
+   fill-opacity="context-fill-opacity"
+   version="1.1"
+   id="svg8"
+   sodipodi:docname="unknown.svg"
+   inkscape:version="0.92.4 (5da689c313, 2019-01-14)">
+  <metadata
+     id="metadata14">
+    <rdf:RDF>
+      <cc:Work
+         rdf:about="">
+        <dc:format>image/svg+xml</dc:format>
+        <dc:type
+           rdf:resource="http://purl.org/dc/dcmitype/StillImage" />
+        <dc:title></dc:title>
+      </cc:Work>
+    </rdf:RDF>
+  </metadata>
+  <defs
+     id="defs12" />
+  <sodipodi:namedview
+     pagecolor="#ffffff"
+     bordercolor="#666666"
+     borderopacity="1"
+     objecttolerance="10"
+     gridtolerance="10"
+     guidetolerance="10"
+     inkscape:pageopacity="0"
+     inkscape:pageshadow="2"
+     inkscape:window-width="1366"
+     inkscape:window-height="704"
+     id="namedview10"
+     showgrid="false"
+     inkscape:pagecheckerboard="true"
+     inkscape:zoom="14.75"
+     inkscape:cx="6"
+     inkscape:cy="7.8644068"
+     inkscape:window-x="0"
+     inkscape:window-y="27"
+     inkscape:window-maximized="1"
+     inkscape:current-layer="svg8" />
+  <path
+     style="opacity:1;fill:#000000;fill-opacity:1;stroke:none;stroke-width:0.21950698;stroke-miterlimit:4;stroke-dasharray:none;stroke-opacity:1"
+     d="M 8.0000004,6.4703382e-8 C 3.5814896,-5.6193623e-4 -5.6174058e-4,3.5814894 2.5500001e-7,8.0000002 -5.6155535e-4,12.418511 3.5814897,16.000562 8.0000004,16 12.418511,16.000562 16.000562,12.418511 16,8.0000002 16.000562,3.5814896 12.418511,-5.6163516e-4 8.0000004,6.4703382e-8 Z M 8.0214364,1.6248661 c 1.8972533,0 3.7954786,1.2556695 3.7963566,3.7684888 0,1.0326857 -0.479188,1.8506343 -0.88746,2.4030011 -0.312208,0.3362234 -0.626266,0.6957324 -0.9624873,0.9839229 l -0.09432,0.072883 -0.192926,0.1907824 -0.143623,0.1436226 c -0.08095,0.080384 -0.15374,0.1705499 -0.216506,0.2658093 -0.096063,0.096064 -0.2165057,0.3364033 -0.2165057,0.8167198 0,1.440957 -2.1607718,1.440957 -2.1607718,0 C 6.9199565,9.5464591 7.1215522,8.8318492 7.5198289,8.2272242 L 8.3108257,7.3397644 8.6002148,7.0996787 C 8.8163582,6.931567 9.0318823,6.6903204 9.224009,6.4501609 9.4674227,6.1564772 9.6186307,5.7985874 9.6570207,5.4190784 c 0,-0.8165421 -0.6968184,-1.6334406 -1.6334404,-1.6334406 -0.9366228,0 -1.6334406,0.8151908 -1.6334406,1.6077171 0,1.4409573 -2.1607718,1.4409569 -2.1607718,0 C 4.2285144,2.8805356 6.1241838,1.6248661 8.0214364,1.6248661 Z m 0.00214,10.6430869 c 0.6244142,0 1.249732,0.414751 1.249732,1.243301 0,1.657101 -2.4994641,1.657101 -2.4994641,0 0,-0.82855 0.6253177,-1.243301 1.2497321,-1.243301 z"
+     id="path24"
+     inkscape:connector-curvature="0"
+     sodipodi:nodetypes="cccccscccccccsccccccsscsssss" />
+</svg>
diff --git a/mail/themes/shared/mail/messengercompose.css b/mail/themes/shared/mail/messengercompose.css
--- a/mail/themes/shared/mail/messengercompose.css
+++ b/mail/themes/shared/mail/messengercompose.css
@@ -542,10 +542,26 @@
   list-style-image: url("chrome://messenger/skin/icons/attach.svg");
 }

-#button-security {
+#button-encryption {
   list-style-image: url("chrome://messenger/skin/icons/privacy-security.svg");
 }

+#button-encryption[checked="false"] {
+  list-style-image: url("chrome://messenger/skin/icons/message-encrypted-notok.svg");
+}
+
+#button-encryption-technology image {
+  display: none;
+}
+
+#button-encryption[checked="false"] {
+  list-style-image: url("chrome://messenger/skin/icons/message-encrypted-notok.svg");
+}
+
+#button-encryption-technology image {
+  display: none;
+}
+
 #button-save {
   list-style-image: url("chrome://messenger/skin/icons/save.svg");
 }
@@ -852,6 +868,16 @@ toolbarbutton.formatting-button[disabled
   margin-inline: 1px 20px;
 }

+#msgSubjectContainer {
+  position: relative;
+}
+
+#msgEncryptedSubjectIcon {
+  position: absolute;
+  top: 8px;
+  left: 10px;
+}
+
 #msgSubject {
   appearance: none;
   margin-top: 0;
@@ -864,6 +890,10 @@ toolbarbutton.formatting-button[disabled
   transition: border .2s, box-shadow .2s;
 }

+#msgSubject.with-openpgp {
+  padding-left: 25px;
+}
+
 .recipients-container {
   display: block;
   /* Necessary for unwanted overflow while resizing the message header */
@@ -1005,7 +1035,7 @@ toolbarbutton.formatting-button[disabled
 }

 .address-pill.invalid-address:not(.editing),
-#MsgHeadersToolbar[brighttext] .address-pill.invalid-address:not(.editing) {
+#msgheaderstoolbar[brighttext] .address-pill.invalid-address:not(.editing) {
   color: #fff;
   background-color: #d70022;
   background-image: url("chrome://global/skin/icons/warning.svg");
@@ -1013,27 +1043,72 @@ toolbarbutton.formatting-button[disabled
   background-repeat: no-repeat;
   background-position: calc(100% - 5px);
   padding-inline-end: 21px;
+  fill: currentcolor;
+  -moz-context-properties: fill;
+}
+
+.address-pill.invalid-key:not(.editing),
+#msgheaderstoolbar[brighttext] .address-pill.invalid-key:not(.editing) {
+  color: #000;
+  background-color: #ffe900;
+  background-image: url("chrome://global/skin/icons/warning.svg");
+  background-size: 12px;
+  background-repeat: no-repeat;
+  background-position: calc(100% - 5px);
+  padding-inline-end: 21px;
+  fill: currentcolor;
+  -moz-context-properties: fill;
+}
+
+.address-pill.missing-key:not(.editing),
+#MsgHeadersToolbar[brighttext] .address-pill.missing-key:not(.editing) {
+  color: #000;
+  background-color: #ffe900;
+  background-image: url("chrome://messenger/skin/icons/unknown.svg");
+  background-size: 12px;
+  background-repeat: no-repeat;
+  background-position: calc(100% - 5px);
+  padding-inline-end: 21px;
   fill: currentColor;
   -moz-context-properties: fill;
 }

 /* RTL variation for background position */
 .address-pill.invalid-address:not(.editing):-moz-locale-dir(rtl),
-#MsgHeadersToolbar[brighttext] .address-pill.invalid-address:not(.editing):-moz-locale-dir(rtl) {
+.address-pill.invalid-key:not(.editing):-moz-locale-dir(rtl),
+.address-pill.missing-key:not(.editing):-moz-locale-dir(rtl),
+#MsgHeadersToolbar[brighttext] .address-pill.invalid-address:not(.editing):-moz-locale-dir(rtl),
+#MsgHeadersToolbar[brighttext] .address-pill.invalid-key:not(.editing):-moz-locale-dir(rtl),
+#MsgHeadersToolbar[brighttext] .address-pill.missing-key:not(.editing):-moz-locale-dir(rtl) {
   background-position: 5px;
 }

 .address-pill.invalid-address:hover:not(.editing),
 .address-pill.invalid-address:focus:not(.editing),
 #MsgHeadersToolbar[brighttext] .address-pill.invalid-address:hover:not(.editing),
-#MsgHeadersToolbar[brighttext] .address-pill.invalid-address:focus:not(.editing) {
+#MsgHeadersToolbar[brighttext] .address-pill.invalid-address:focus:not(.editing),
   background-color: #a4000f;
 }

+.address-pill.invalid-key:hover:not(.editing),
+.address-pill.invalid-key:focus:not(.editing),
+.address-pill.missing-key:hover:not(.editing),
+.address-pill.missing-key:focus:not(.editing),
+#MsgHeadersToolbar[brighttext] .address-pill.invalid-key:hover:not(.editing),
+#MsgHeadersToolbar[brighttext] .address-pill.invalid-key:focus:not(.editing),
+#MsgHeadersToolbar[brighttext] .address-pill.missing-key:hover:not(.editing),
+#MsgHeadersToolbar[brighttext] .address-pill.missing-key:focus:not(.editing) {
+  background-color: #d7b600;
+}
+
 .address-pill[selected]:not(.editing),
+.address-pill.invalid-address[selected]:not(.editing),
+.address-pill.invalid-key[selected]:not(.editing),
+.address-pill.missing-key[selected]:not(.editing),
 #MsgHeadersToolbar[brighttext] .address-pill[selected]:not(.editing),
-.address-pill.invalid-address[selected]:not(.editing),
-#MsgHeadersToolbar[brighttext] .address-pill.invalid-address[selected]:not(.editing) {
+#MsgHeadersToolbar[brighttext] .address-pill.invalid-address[selected]:not(.editing),
+#MsgHeadersToolbar[brighttext] .address-pill.invalid-key[selected]:not(.editing),
+#MsgHeadersToolbar[brighttext] .address-pill.missing-key[selected]:not(.editing) {
   color: HighlightText;
   background-color: Highlight;
 }
@@ -1295,26 +1370,6 @@ button:is(
   margin-inline: 4px;
 }

-/* OpenPGP and S/MIME encryption and signature status icons */
-#encryption-tech {
-  margin-inline: 6px 2px;
-}
-
-#signing-status,
-#encryption-status {
-  /* NOTE: either the signing-status or encryption-status may be the last icon
-   * in this part of the status bar. Here, we treat both as if they are the last
-   * icon and give them a wider margin. But below, we shrink the starting margin
-   * for the second icon if the first icon is shown. */
-  margin-inline-end: 4px;
-  -moz-context-properties: fill;
-  fill: currentColor;
-}
-
-#signing-status:not([hidden]) + #encryption-status {
-  margin-inline-start: -2px;
-}
-
 /* Language selector */
 #languageStatusButton {
   margin-block: 0;
